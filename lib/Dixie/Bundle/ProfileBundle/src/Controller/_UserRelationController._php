<?php

declare(strict_types=1);

namespace Talav\ProfileBundle\Controller;

use Doctrine\ORM\EntityManagerInterface;
use Groshy\Entity\User;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Attribute\AsController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Routing\Requirement\Requirement;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\String\Slugger\AsciiSlugger;
use Talav\Component\User\Model\UserInterface;
use Talav\CoreBundle\Controller\AbstractController;
use Talav\CoreBundle\Interfaces\RoleInterface;
use Talav\ProfileBundle\Entity\UserProfileRelation;
use Talav\ProfileBundle\Entity\UserRelation;
use Talav\ProfileBundle\Form\Type\UserRelationType;
use Talav\ProfileBundle\Repository\UserProfileRelationRepository;
use Talav\ProfileBundle\Repository\UserRelationRepository;
use Talav\UserBundle\Mailer\UserMailerInterface;

#[AsController]
#[Route(path: '/user-relation')]
#[IsGranted(RoleInterface::ROLE_USER)]
class UserRelationController extends AbstractController
{
    /**
     * @var int
     */
    private const RELATIONS_PER_PAGE = 25;

	#[Route('/', name: 'user_profile_relation_index', methods: ['GET'])]
	public function index(UserProfileRelationRepository $userProfileRelationRepository): Response
	{
		$user = $this->getUser();
		$userRelations = $userProfileRelationRepository->findAllFriendUserProfileRelation($user);

		return $this->render('@TalavProfile/user_relation/index.html.twig', [
			'user_relations' => $userRelations,
		]);
	}

	#[Route('/request', name: 'user_relation_request_index', methods: ['GET'])]
	public function indexRequest(UserRelationRepository $userRelationRepository): Response
	{
		$recipient = $this->getUser();

		$userRelationRequest = $userRelationRepository->findBy(['recipient' => $recipient, 'status' => 'pending']);

		return $this->render('@TalavProfile/user_relation/index_request.html.twig', [
			'user_relations' => $userRelationRequest,
		]);
	}

	#[Route('/new/{user_slug}', name: 'user_relation_new', methods: ['POST'])]
	#[ParamConverter('user', options: ['mapping' => ['user_slug' => 'slug']])]
	public function new(Request $request, User $user, UserRelationService $userRelationService, UserRelationRepository $userRelationRepository, AsciiSlugger $slugger): Response
	{
		$sender = $this->getUser();

		$recipient = $user;
		$relationType = $request->request->get('type');

		$allBlockedUserRelation = $userRelationRepository->findBlockedRelationByUser($sender, $recipient);

		if (empty($allBlockedUserRelation)){
			if ($relationType === 'team'){
				$this->addFlash('notice',
					$userRelationService->handleNewTeamRelation($sender, $recipient)
				);
			}
			elseif ($relationType === 'friend'){
				$this->addFlash('notice',
					$userRelationService->handleNewFriendRelation($sender, $recipient)
				);
			}
		}
		else{
			$this->addFlash('notice',
				"Cet utilisateur vous a bloquer vous ne pouvez pas intÃ©ragir avec lui."
			);
		}

		return $this->redirectToRoute('user_profile_show', ['slug' => $slugger->slug($recipient->getUsername())], Response::HTTP_SEE_OTHER);
	}

	#[Route('/delete/{id}', name: 'user_profile_relation_delete', methods: ['POST'])]
	public function delete(Request $request, UserProfileRelation $userProfileRelation): Response
	{
		if ($this->isCsrfTokenValid('delete'.$userProfileRelation->getId(), $request->request->get('_token'))) {
			$entityManager = $this->entityManager;
			$entityManager->remove($userProfileRelation);
			$entityManager->flush();

			$this->addFlash('success',
				"Your relationship with this user has been deleted."
			);
		}

		return $this->redirectToRoute('user_relation_request_index', [], Response::HTTP_SEE_OTHER);

	}

	#[Route('/{id}/accept', name: 'user_relation_accept', methods: ['GET'])]
	public function acceptRequest(UserProfileRelation $userRelation, UserProfileRelationRepository $userRelationRepository): Response
	{
		$user = $this->getUser();

		$userRelation->setStatus('accepted');
		$this->entityManager->flush();

		return $this->redirectToRoute('user_profile_relation_index', [], Response::HTTP_SEE_OTHER);
	}

	#[Route('/block/{user_slug}', name: 'user_profile_relation_block', methods: ['GET', 'POST'])]
	#[ParamConverter('user', options: ['mapping' => ['user_slug' => 'slug']])]
	public function blockUser(/*UserRelationService $userRelationService,*/UserProfileRelationRepository $userProfileRelationRepository, User $user): Response
	{
		$this->addFlash('success', 'dd'
//			$userRelationService->handleBlock($user)
		);

		return $this->redirectToRoute('user_profile_index', [], Response::HTTP_SEE_OTHER);
	}

	#[Route('/{id}/decline', name: 'user_relation_decline', methods: ['POST'])]
	public function declineRequest(UserProfileRelation $userRelation): Response
	{
		$userRelation->setStatus('rejected');
		$this->entityManager->flush();

		return $this->redirectToRoute('user_profile_relation_index', [], Response::HTTP_SEE_OTHER);
	}

	#[Route(path: '/add/{username}', name: 'user_profile_user_relation_add', requirements: ['username' => Requirement::ASCII_SLUG])]
    #[ParamConverter('member', class: User::class, options: ['mapping' => ['username' => 'username']])]
    public function add(Request $request, User $user, UserMailerInterface $mailer): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getUser();
        if ($user === $loggedInMember) {
            return $this->redirectToRoute('user_profile_edit');
            //return $this->redirectToRoute('members_profile', ['username' => $loggedInMember->getusername()]);
        }

        $relation = $this->findRelationBetween($loggedInMember, $user);
        if (null !== $relation) {
            return $this->redirectToRoute('user_profile_user_relation_edit', ['username' => $user->getUsername()]);
        }

        $form = $this->createForm(UserRelationType::class, $relation);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UserRelation $relation */
            $relation = $form->getData();
            $relation->setOwner($loggedInMember);
            $relation->setReceiver($user);

            $this->entityManager->persist($relation);
            $this->entityManager->flush();

            $mailer->sendRelationNotification($relation);

            return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $loggedInMember->getUsername()]);
        }

        return $this->render('@TalavProfile/user_relation/add.html.twig', [
            'form' => $form->createView(),
            'member' => $user,
//            'submenu' => $this->profileSubmenu->getSubmenu($user, $loggedInMember, ['active' => 'add_relation']),
        ]);
    }

    #[Route(path: '/edit/{username}', name: 'user_profile_user_relation_edit', requirements: ['username' => Requirement::ASCII_SLUG])]
    #[ParamConverter('member', class: User::class, options: ['mapping' => ['username' => 'username']])]
    public function edit(Request $request, User $member): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getUser();
        if ($member === $loggedInMember) {
            return $this->redirectToRoute('user_profile_edit');
//            return $this->redirectToRoute('members_profile', ['username' => $loggedInMember->getusername()]);
        }

        $relation = $this->findRelationBetween($loggedInMember, $member);
        if (null === $relation) {
            return $this->redirectToRoute('user_profile_user_relation_add', ['username' => $member->getUsername()]);
        }

        $form = $this->createForm(UserRelationType::class, $relation);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $relation = $form->getData();
            $relation->setUpdatedAt(new \DateTimeImmutable());

            $this->entityManager->persist($relation);
            $this->entityManager->flush();

            return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $loggedInMember->getUsername()]);
        }

        return $this->render('@TalavProfile/user_relation/edit.html.twig', [
            'form' => $form->createView(),
            'member' => $member,
        ]);
    }

    #[Route(path: '/delete/{username}', name: 'user_profile_user_relation_delete', requirements: ['username' => Requirement::ASCII_SLUG])]
    #[ParamConverter('member', class: User::class, options: ['mapping' => ['username' => 'username']])]
    public function remove(User $member, EntityManagerInterface $entityManager): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getUser();
        if ($member === $loggedInMember) {
            return $this->redirectToRoute('user_profile_edit');
//            return $this->redirectToRoute('members_profile', ['username' => $loggedInMember->getusername()]);
        }

        /** @var UserRelationRepository $relationRepository */
        $relationRepository = $this->entityManager->getRepository(UserRelation::class);

        $relation = $relationRepository->findRelationBetween($loggedInMember, $member);
        if (null === $relation) {
            return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
        }

        $entityManager->remove($relation);
        $entityManager->flush();

        $this->infoTrans('flash.relation.removed');
//        $this->addTranslatedFlash('notice', 'flash.relation.removed');

        return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
    }

    #[Route(path: '/confirm/{username}', name: 'user_profile_user_relation_confirm', requirements: ['username' => Requirement::ASCII_SLUG])]
    #[ParamConverter('member', class: User::class, options: ['mapping' => ['username' => 'username']])]
    public function confirm(User $member, EntityManagerInterface $entityManager): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getUser();
        if ($member === $loggedInMember) {
            return $this->redirectToRoute('user_profile_edit');
//            return $this->redirectToRoute('members_profile', ['username' => $loggedInMember->getusername()]);
        }

        /** @var UserRelationRepository $relationRepository */
        $relationRepository = $this->entityManager->getRepository(UserRelation::class);

        $relation = $relationRepository->findUnconfirmedRelationBetween($member, $loggedInMember);
        if (null === $relation) {
            return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
        }

        $relation->setConfirmed('Yes');
        $entityManager->flush();

        $this->infoTrans('flash.relation.confirmed');
//        $this->addTranslatedFlash('notice', 'flash.relation.confirmed');

        return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
    }

    /**
     * @Route("/members/{username}/relation/dismiss", name="dismiss_relation")
     */
    public function dismiss(User $member, EntityManagerInterface $entityManager): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getUser();
        if ($member === $loggedInMember) {
            return $this->redirectToRoute('user_profile_edit');
//            return $this->redirectToRoute('members_profile', ['username' => $loggedInMember->getusername()]);
        }

        /** @var UserRelationRepository $relationRepository */
        $relationRepository = $this->entityManager->getRepository(UserRelation::class);
        $relation = $relationRepository->findUnconfirmedRelationBetween($member, $loggedInMember);
        if (null === $relation) {
            return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
        }

        $entityManager->remove($relation);
        $entityManager->flush();

        $this->infoTrans('flash.relation.dismissed');
//        $this->addTranslatedFlash('notice', 'flash.relation.dismissed');

        return $this->redirectToRoute('user_profile_user_relation_relations', ['username' => $member->getUsername()]);
    }

    #[Route(path: '/relations/{username}/{page}', name: 'user_profile_user_relation_relations', requirements: ['username' => Requirement::ASCII_SLUG])]
    public function relations(User $member, int $page = 1): Response
    {
        /** @var UserInterface $loggedInMember */
        $loggedInMember = $this->getuser();

        /** @var UserRelationRepository $relationRepository */
        $relationRepository = $this->entityManager->getRepository(UserRelation::class);
        $relations = $relationRepository->getRelations($member, $page, self::RELATIONS_PER_PAGE);

        return $this->render('@TalavProfile/user_relation/relations.html.twig', [
            'member' => $member,
            'relations' => $relations
        ]);
    }

    private function findRelationBetween(UserInterface $loggedInMember, UserInterface $member): ?UserRelation
    {
        /** @var UserRelationRepository $relationRepository */
        $relationRepository = $this->entityManager->getRepository(UserRelation::class);

        return $relationRepository->findRelationBetween($loggedInMember, $member);
    }
}
