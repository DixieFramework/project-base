parameters:
    talav_user.authentication_handler.class: Talav\UserBundle\Handler\AuthenticationHandler

    talav_user.display_captcha: false

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
        bind:
            $formLoginAuthenticator: '@security.authenticator.form_login.main'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Talav\UserBundle\:
        resource: '../../*'
        exclude:
            - '../../DependencyInjection/'
#            - '../../Entity/'
            - '../../Event'
            - '../../Migrations'
            - '../../Tests/'
            - '../../vendor/'
            - '../../Controller/'
            - '../../EventSubscriber/'

    # ---------------------------------------------------------
    # Register all controllers of UserBundle as services
    # ---------------------------------------------------------
    Talav\UserBundle\Controller\:
        resource: '../../Controller'
        public: true
        tags: [ 'controller.service_arguments' ]

#    Talav\UserBundle\Controller\Frontend\ResettingController:
#        arguments:
#            $retryTtl: '%talav_user.resetting.retry_ttl%'
#            $tokenTtl: '%talav_user.resetting.token_ttl%'
#
#    Talav\UserBundle\Controller\Frontend\RegistrationController:
#        arguments:
#            $parameters:
#                form_type: '%talav_user.registration.form_type%'
#                form_model: '%talav_user.registration.form_model%'
#                form_validation_groups: '%talav_user.registration.form_validation_groups%'
    Talav\UserBundle\Controller\RegistrationController:
        arguments:
            $parameters:
                form_type: '%talav_user.registration.form_type%'
                form_model: '%talav_user.registration.form_model%'
                form_validation_groups: '%talav_user.registration.form_validation_groups%'

    Talav\UserBundle\EventSubscriber\:
        resource: '../../EventSubscriber'
        tags: [ 'kernel.event_subscriber' ]

    Talav\UserBundle\Command\CreateUserCommand:
        tags:
            - { name: 'console.command', command: 'talav:user:create' }

    talav.user.provider.oath:
        class: Talav\UserBundle\Provider\TalavUserProvider
        arguments:
            - '@app.manager.user'
            - '@app.manager.user_oauth'
        public: true

    talav.user.security.user_checker_observer:
        class: Talav\UserBundle\Security\UserChecker\UserCheckerObserver

    Talav\UserBundle\Security\UserChecker\UserCheckerObserver:
        alias: 'talav.user.security.user_checker_observer'

    Talav\UserBundle\Security\UserChecker\ConfirmedUserChecker:
        class: Talav\UserBundle\Security\UserChecker\ConfirmedUserChecker
        tags:
            - { name: talav.user.security.user_checker }
            - { name: container.preload, class: Talav\UserBundle\Security\UserChecker\ConfirmedUserChecker }

    Talav\UserBundle\Security\UserChecker\LoginAttemptsUserChecker:
        class: Talav\UserBundle\Security\UserChecker\LoginAttemptsUserChecker
        arguments:

        tags:
            - { name: talav.user.security.user_checker }
            - { name: container.preload, class: Talav\UserBundle\Security\UserChecker\ConfirmedUserChecker }

    Talav\Component\User\Message\CommandHandler\:
        resource: '%kernel.project_dir%/vendor/talav/user/src/Message/CommandHandler/*'

    Talav\Component\User\Mapper\Configurator\:
        resource: '%kernel.project_dir%/vendor/talav/user/src/Mapper/Configurator/*'

    Talav\UserBundle\EventListener\InjectRoleHierarchyListener:
        class: Talav\UserBundle\EventListener\InjectRoleHierarchyListener
        arguments: [ '@service_container' ]
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'postLoad' }
            - { name: 'doctrine.orm.entity_listener', event: 'preLoad' }

    Talav\UserBundle\EventListener\LoginRedirectListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: checkLogin }

    Talav\UserBundle\EventListener\RedirectUserListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    talav_user.authentication_handler:
        class: '%talav_user.authentication_handler.class%'
        arguments:
            - '@translator'
            - '@router'

    Talav\UserBundle\Handler\AuthenticationHandler:
        alias: '@talav_user.authentication_handler'

#    Symfony\Component\Workflow\WorkflowInterface: '@state_machine.abstract'

#    Talav\UserBundle\Doctrine\EntityListener\UserEmailEntityListener:
#        class: Talav\UserBundle\Doctrine\EntityListener\UserEmailEntityListener
#        tags:
#            -
#                name: 'doctrine.orm.entity_listener'
#                event: 'postFlush'
#                entity: 'Talav\UserBundle\Entity\User'

    SymfonyCasts\Bundle\ResetPassword\Persistence\ResetPasswordRequestRepositoryInterface: '@Talav\UserBundle\Repository\ResetPasswordRequestRepository'

    # ================================================================================
    # REPOSITORIES
    # ================================================================================

    Talav\UserBundle\Repository\ResetPasswordTokenRepository:
        class:     Talav\UserBundle\Repository\ResetPasswordTokenRepository
        factory:   ['@doctrine.orm.entity_manager', getRepository]
        arguments: ['Talav\UserBundle\Entity\ResetPasswordToken']

    Talav\UserBundle\Repository\ResetPasswordRequestRepository:
        class:     Talav\UserBundle\Repository\ResetPasswordRequestRepository
        factory:   ['@doctrine.orm.entity_manager', getRepository]
        arguments: ['Talav\UserBundle\Entity\ResetPasswordRequest']
